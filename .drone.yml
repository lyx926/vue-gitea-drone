kind: pipeline # 定义一个管道
type: docker # 定义管道类型
name: vue # 定义管道名称

steps:
  - name: build-project # 步骤名称
    image: node:18.12.1 # 使用镜像和版本
    volumes: # 当前步骤使用(挂载)的卷轴
      - name: node_modules # 数据卷名称
        path: /root/node_modules # 容器内的绝对路径
      - name: vue-build
        path: /app/build # 将应用打包好的Jar和执行脚本挂载出来
    commands: # 定义在Docker容器中执行的shell命令
      - yarn config set registry https://registry.npm.taobao.org # 切换淘宝镜像
      - yarn # 安装依赖
      - yarn build # 执行构建指令
      - cp -r dist/* /app/build/dist/ # 复制dist
      - cp Dockerfile /app/build/ # 复制Dockerfile
      - cp default.conf /app/build/ # 复制nginx.d/default.conf
      - cp run.sh /app/build/ # 复制run.sh脚本

  - name: build-docker # 步骤名称
    image: plugins/docker # 使用镜像和版本
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: vue-build # 数据卷名称
        path: /app/build # 将应用打包好的Jar和执行脚本挂载出来
      - name: docker # 数据卷名称
        path: /var/run/docker.sock # 挂载宿主机的docker
    settings:
      dockerfile: /app/build/Dockerfile
    commands: # 定义在Docker容器中执行的shell命令
      - cd /app/build # 切换目录
      - chmod +x run.sh # 脚本执行权限
      - sh run.sh # 执行脚本
      - docker ps # 容器日志

volumes: # 定义流水线挂载目录，用于共享数据 声明宿主机 映射到 drone执行器的数据卷
  - name: vue-build # 数据卷名称
    host:
      path: /home/data/node/build # 从宿主机中挂载的目录
  - name: node_modules # 数据卷名称
    host:
      path: /home/data/node/node_modules # 从宿主机中挂载的目录
  - name: docker # 数据卷名称
    host:
      path: /var/run/docker.sock # 挂载宿主机的docker
